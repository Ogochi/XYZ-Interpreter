-- automatically generated by BNF Converter with little changes
module Main where


import System.IO ( stdin, hGetContents, hPutStrLn, stderr )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )

import LexGrammar
import ParGrammar
import SkelGrammar
import PrintGrammar
import AbsGrammar

import Types
import Interpreter

import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

runFile :: Mode -> FilePath -> IO ()
runFile mode f = readFile f >>= run mode

run :: Mode -> String -> IO ()
run mode s = let ts = myLLexer s in case pProgram ts of
           Bad s    -> do hPutStrLn stderr "\nParse              Failed...\n"
                          hPutStrLn stderr "Tokens:"
                          hPutStrLn stderr $ show ts
                          hPutStrLn stderr s
                          exitFailure
           Ok  (Program tree) -> do
                          result <- runInterpret tree mode

                          case result of
                            Left exception -> do
                              hPutStrLn stderr "There was a runtime exception\n"

                              case exception of
                                ZeroDivException -> hPutStrLn stderr "Dividing by 0 is forbidden."
                                OperationNotSupportedException -> hPutStrLn stderr "Operation is not supported."
                              exitFailure

                            Right _ -> do exitSuccess


usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin."
    , "  (files)         Parse content of files."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> hGetContents stdin >>= run Interactive
    fs -> mapM_ (runFile FileMode) fs
