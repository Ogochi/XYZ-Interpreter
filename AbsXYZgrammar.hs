

module AbsXYZgrammar where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [Stmt]
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | Decl Type [Item]
    | Ass Ident Expr
    | StructAss Ident [Field] Expr
    | Ret Expr
    | VRet
    | Cond Expr Block
    | CondElse Expr Block Block
    | While Expr Block
    | SExp Expr
    | Function Type Ident [Arg] Block
    | GeneratorDef Type Ident [Arg] GenBlock
    | StructDef Ident [StructItem]
    | Print Expr
    | ListDrop Ident
    | ListAdd Ident Expr
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data Arg = ValArg Type Ident | RefArg Type Ident
  deriving (Eq, Ord, Show, Read)

data GenBlock = GenBlock [GenStmt]
  deriving (Eq, Ord, Show, Read)

data GenStmt = GenStmt Stmt | Yield Expr
  deriving (Eq, Ord, Show, Read)

data StructItem = StructItem Type Ident
  deriving (Eq, Ord, Show, Read)

data Field = Field Ident
  deriving (Eq, Ord, Show, Read)

data Type
    = Int
    | Str
    | Bool
    | Void
    | List Type
    | Struct Ident
    | Generator Type
  deriving (Eq, Ord, Show, Read)

data Expr
    = EListLength Ident
    | EListElem Ident Expr
    | EStructField Ident [Field]
    | ENextGen Ident
    | EVar Ident
    | ELitInt Integer
    | ELitList
    | ELitTrue
    | ELitFalse
    | EApp Ident [Expr]
    | EString String
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

